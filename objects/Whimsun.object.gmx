<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWhimsun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Look here for initializations!
event_inherited();

/*
    IMPORTANT!
    Your enemy MUST be a child of the Enemy object!
    To animate your enemy, place code in the Draw event of this object!  If not, assign the sprite you want to this enemy!
*/

///Initialize variables
deadSprite = sprWhimsunDead;  //Set this to the sprite used when your monster dies
spareSprite = sprWhimsunSpare;  //Set this to the sprite used when your monster is spared
drop = false; //Set this to true if your monster drops an item
dropItem = 0 //Set this to the id of the item your monster drops (if it drops anything).  Check the script load_item_list for item ids.

//position
hpDisplayOffset = 140; //This changes the y position of the healthbar of your monster(in case your center of rotation is not the center)
speechX = 80; //This changes the x position of your monster's speech bubble.
speechY = -80;  //This changes the y position of your monster's speech bubble.

//stats
name = "Whimsum";  //The name of your monster!  This is used for all references to your monster in the menu.
def = 1;  //This doesn't actually do anything!
atk = 1; //This doesn't actually do anything!
maxHP = 1;  //Must not be 0!
hp = maxHP;
sparable = 1; //This decides whether you can spare this monster immediately.  Set it to 1 if so.
fleeable = 0;  //This decides whether you can run from this monster.  Set it to 0 if you can't.

//Moveset
/*
    ADDING AN ATTACK
    Copy the lines indicated below to make a new move.  Change the values of the first lines to change the first move.
    moves[i,0] = meb_attack_1; - All monster attacks are created using timelines.  This line is the name of the timeline.  Check Timelines to see all monster attacks.
    moves[i,1] = 200; - This line determines the width of the box for this attack.
    moves[i,2] = 130; - This line determines the height of the box for this attack.  130 is the standard height.
    moves[i,3] = 320; - This line determines the starting x position of your attack.  320 is the center.
    moves[i,4] = 320; - This line determines the starting y potition of your attack.  320 is the center if the height is 130. 
*/
var i = 0;
moves = 0;
moves[i,0] = whimsun_attack_1;  //Copy from here
moves[i,1] = 200;
moves[i,2] = 130;
moves[i,3] = 320;
moves[i,4] = 320;
i++;                        //To here

//Actset
/*
    ADDING AN ACT
    Copy the lines indicated below to make a new ACT option.
    acts[i,0] = "Check"; - This line is the name of the ACT option.  This name will be stored in global.lastAction for objects to check if this was the last move used.
    acts[i,1] = This line determines what text will be written for this act option.  All actions have an associated text.
    acts[i,2] = act_null; - This line references the script run when you choose this ACT option.  Leave it as act_null if you want nothing to happen.  This line is where special events occur, like making an enemy sparable.
*/
acts = 0;
acts[0,0] = "Check";
acts[0,1] = "Whimsum - 1 ATK 1 DEF[w:5]#* It forces itself to fight.";
acts[0,2] = act_null;
acts[1,0] = "Insult";
acts[1,1] = "You insulted Whimsum.[w:5]#* He's crying now..";
acts[1,2] = act_null;
acts[2,0] = "Threat";
acts[2,1] = "You tell Whimsum to#commit suicide.";
acts[2,2] = act_null;
i++;                                                    //To here

//Openers - You should have 3 openers in your enemy, in case it is the first, second, or third to appear.
opener = 0;
opener[0] = "Whimsum attacks!";
opener[1] = "Whimsum is getting tears#in the textbox.";
opener[2] = "Whimsum... crys.";

//Flavor text - By default, a line from this array is randomly selected for the flavor text on your turn.  Override this with Event_User 2
flavor = 0;
flavor[0] = "Whimsun is crying.#* Like always.";

//Responses - By default, speech bubbles select a random line from this array.
response = 0;
response[0] = "*cries*";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Advance the turn
if BattleWindowCont.state = 0 &amp;&amp; ready = 1 &amp;&amp; instance = 0 &amp;&amp; instance_number(SpeechBubble) = 0
{
    ready = 0;
    with TurnCont
    {
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Taking damage
if shake &gt; 0.2
{
    shake_time++;
    x = anchorX + sin(degtorad(shake_time * 75)) * shake;
    shake *= .9;
}
else
{
    shake_time = 0;
    shake = 0;
    x = anchorX;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prompt to choose attack

//By default, your monster randomly chooses any of the attacks it has in the moves[] array.

//You can override this with special conditions!
var options = array_height_2d(moves) - 1;
attack_i = irandom(options);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prompt for flavor text

//By default flavor text is randomly selected from the flavor[] array.

//You can place special conditions here to override this, check some of the example enemies for ideas!
PlayerMenuCont.mainText = flavor[irandom(array_length_1d(flavor) - 1)];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack

//By default, the enemy is prompted to attack and then runs the associated timeline of that attack.
//You can safely delete this event and draw it from the base object Enemy.
timeline_index = moves[attack_i,0];
timeline_position = 0;
timeline_running = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
